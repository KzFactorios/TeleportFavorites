require("tests.test_bootstrap")
-- Shared Factorio test environment (globals, settings, etc.)
require("tests.mocks.factorio_test_env")

local Favorite = require("core.favorite.favorite")
local CollectionUtils = require("core.utils.collection_utils")
local mock_player_data = require("tests.mocks.mock_player_data")

-- Simple deep copy fallback for tests
local function simple_deep_copy(obj)
  if type(obj) ~= "table" then return obj end
  local copy = {}
  for k, v in pairs(obj) do
    copy[k] = simple_deep_copy(v)
  end
  return copy
end

-- Favorite object tests (from favorite_spec.lua)
describe("Favorite object", function()
  it("should create a favorite with correct properties", function()
    local fav = Favorite.new("gps_string")
    assert.equals(fav.gps, "gps_string")
    assert.is_nil(fav.icon)
    assert.is_nil(fav.label)
  end)

  it("should integrate with mock player favorites", function()
    local mock = mock_player_data.create_mock_player_data({
      tag_ids = {"tag1", "tag2", "tag3"},
      player_names = {"TestPlayer"},
      favorites_config = {single_cases = {3}}
    })
    local favs = mock.favorites["TestPlayer_3"]
    assert.is_table(favs)
    assert.equals(#favs, 3)
    for _, tag_id in ipairs(favs) do
      assert.is_string(tag_id)
    end
  end)
end)

-- 100% coverage/edge-case tests (from favorite_100_spec.lua)
describe("FavoriteUtils 100% coverage", function()
  it("should handle check_state with invalid check type", function()
    local result = Favorite.check_state({gps = "1.2.3"}, "invalid_check_type")
    assert.is_false(result)
  end)
  it("should handle check_state for empty table", function()
    local result = Favorite.check_state({}, "blank")
    assert.is_true(result)
  end)
  it("should properly check all state types", function()
    local fav = Favorite.new("1.2.3", false, { text = "Test" })
    local blank_fav = Favorite.get_blank_favorite()
    local locked_fav = Favorite.new("1.2.3", true)
    assert.is_false(Favorite.check_state(fav, "blank"))
    assert.is_true(Favorite.check_state(blank_fav, "blank"))
    assert.is_false(Favorite.check_state(nil, "blank"))
    assert.is_false(Favorite.check_state(123, "blank"))
    assert.is_true(Favorite.check_state(fav, "valid"))
    assert.is_false(Favorite.check_state(blank_fav, "valid"))
    assert.is_false(Favorite.check_state({}, "valid"))
    assert.is_false(Favorite.check_state(fav, "locked"))
    assert.is_true(Favorite.check_state(locked_fav, "locked"))
    assert.is_false(Favorite.check_state(fav, "empty"))
    assert.is_true(Favorite.check_state({}, "empty"))
    assert.is_true(Favorite.check_state(nil, "empty"))
  end)
  it("should handle copy with non-table input", function()
    assert.is_nil(Favorite.copy(nil))
    assert.is_nil(Favorite.copy("not a table"))
    assert.is_nil(Favorite.copy(123))
  end)
  it("should copy favorites with additional fields", function()
    local fav = Favorite.new("1.2.3", false, { text = "Test" })
    fav.custom_field = "custom value"
    local copy = Favorite.copy(fav)
    assert.is_not_nil(copy)
    assert.equals(fav.gps, copy.gps)
    assert.equals(fav.locked, copy.locked)
    assert.equals(fav.tag.text, copy.tag.text)
    assert.equals(fav.custom_field, copy.custom_field)
  end)
  it("should handle equals with non-table inputs", function()
    local fav = Favorite.new("1.2.3")
    assert.is_false(Favorite.equals(fav, nil))
    assert.is_false(Favorite.equals(nil, fav))
    assert.is_false(Favorite.equals(fav, "not a table"))
    assert.is_false(Favorite.equals("not a table", fav))
  end)
  it("should correctly compare favorites with tags", function()
    local fav1 = Favorite.new("1.2.3", false, { text = "Test" })
    local fav2 = Favorite.new("1.2.3", false, { text = "Test" })
    local fav3 = Favorite.new("1.2.3", false, { text = "Different" })
    local fav4 = Favorite.new("1.2.3", false)
    assert.is_true(Favorite.equals(fav1, fav2))
    assert.is_false(Favorite.equals(fav1, fav3))
    assert.is_false(Favorite.equals(fav1, fav4))
  end)
  it("should update all properties correctly", function()
    local fav = Favorite.new("1.2.3", false)
    Favorite.update_property(fav, "gps", "4.5.6")
    assert.equals("4.5.6", fav.gps)
    local tag = { text = "Test Tag" }
    Favorite.update_property(fav, "tag", tag)
    assert.equals(tag, fav.tag)
    Favorite.update_property(fav, "locked", true)
    assert.is_true(fav.locked)
    Favorite.update_property(fav, "locked")
    assert.is_false(fav.locked)
    local before = (CollectionUtils and CollectionUtils.deep_copy) and CollectionUtils.deep_copy(fav) or simple_deep_copy(fav)
    Favorite.update_property(fav, "invalid_property", "some value")
    assert.same(before, fav)
  end)
end)
