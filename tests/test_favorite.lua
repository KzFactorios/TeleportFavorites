

local FavoriteUtils = require("core.favorite.favorite")

describe("FavoriteUtils", function()
  it("should create a favorite with correct properties", function()
    local fav = FavoriteUtils.new("gps_string", true, { label = "lbl" })
    assert.equals(fav.gps, "gps_string")
    assert.is_true(fav.locked)
    assert.same(fav.tag, { label = "lbl" })
  end)

  it("should toggle locked state", function()
    local fav = FavoriteUtils.new("gps1", false, nil)
    FavoriteUtils.toggle_locked(fav)
    assert.is_true(fav.locked)
    FavoriteUtils.toggle_locked(fav)
    assert.is_false(fav.locked)
  end)

  it("should copy and compare favorites", function()
    local fav = FavoriteUtils.new("gps1", true, { label = "test" })
    local copy = FavoriteUtils.copy(fav)
    assert.are.same(fav, copy)
    assert.not_equals(fav, copy)
    assert.is_true(FavoriteUtils.equals(fav, copy))
    copy.gps = "gps2"
    assert.is_false(FavoriteUtils.equals(fav, copy))
  end)

  it("should update property", function()
    local fav = FavoriteUtils.new("gps1", false, nil)
    FavoriteUtils.update_property(fav, "gps", "gps2")
    assert.equals(fav.gps, "gps2")
    FavoriteUtils.update_property(fav, "locked")
    assert.is_true(fav.locked)
    FavoriteUtils.update_property(fav, "locked", false)
    assert.is_false(fav.locked)
    FavoriteUtils.update_property(fav, "tag", { foo = "bar" })
    assert.same(fav.tag, { foo = "bar" })
  end)

  it("should handle blank and valid checks", function()
    local blank = FavoriteUtils.get_blank_favorite()
    assert.is_true(FavoriteUtils.is_blank_favorite(blank))
    local fav = FavoriteUtils.new("gps1", false, nil)
    assert.is_false(FavoriteUtils.is_blank_favorite(fav))
    assert.is_true(FavoriteUtils.valid(fav))
    assert.is_false(FavoriteUtils.valid({}))
  end)
end)
