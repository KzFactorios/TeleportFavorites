local FavoriteUtils = require("core.favorite.favorite")

describe("FavoriteUtils uncovered logic", function()
  it("should toggle locked state", function()
    local fav = FavoriteUtils.new("gps1", false, nil)
    FavoriteUtils.toggle_locked(fav)
    assert.is_true(fav.locked)
    FavoriteUtils.toggle_locked(fav)
    assert.is_false(fav.locked)
  end)

  it("should check state correctly", function()
    local fav = FavoriteUtils.new("gps1", false, nil)
    assert.is_false(FavoriteUtils.check_state(fav, "blank"))
    assert.is_true(FavoriteUtils.check_state(fav, "valid"))
    assert.is_false(FavoriteUtils.check_state(fav, "locked"))
    assert.is_false(FavoriteUtils.check_state(fav, "empty"))
  end)

  it("should identify blank favorite", function()
    local blank = FavoriteUtils.get_blank_favorite()
    assert.is_true(FavoriteUtils.is_blank_favorite(blank))
    local fav = FavoriteUtils.new("gps1", false, nil)
    assert.is_false(FavoriteUtils.is_blank_favorite(fav))
  end)

  it("should validate favorite", function()
    local fav = FavoriteUtils.new("gps1", false, nil)
    assert.is_true(FavoriteUtils.valid(fav))
    assert.is_false(FavoriteUtils.valid({}))
  end)

  it("should copy favorite", function()
    local fav = FavoriteUtils.new("gps1", true, { label = "test" })
    local copy = FavoriteUtils.copy(fav)
    assert.are.same(fav, copy)
    assert.not_equals(fav, copy)
  end)

  it("should compare favorites for equality", function()
    local fav1 = FavoriteUtils.new("gps1", false, nil)
    local fav2 = FavoriteUtils.new("gps1", false, nil)
    assert.is_true(FavoriteUtils.equals(fav1, fav2))
    fav2.gps = "gps2"
    assert.is_false(FavoriteUtils.equals(fav1, fav2))
  end)

  it("should update property", function()
    local fav = FavoriteUtils.new("gps1", false, nil)
    FavoriteUtils.update_property(fav, "gps", "gps2")
    assert.equals(fav.gps, "gps2")
  end)
end)
